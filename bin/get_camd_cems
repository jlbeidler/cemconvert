#!/usr/bin/env python
# Pull the daily emissions file from CAMD
# Write as monthly CEMs files that can be input into the cemconvert program

import time
import pandas as pd
import requests

def main():
    # YOUR API KEY
    API_KEY = 'YOUR_DATAGOV_API_KEY'
    # Integer value of year YYYY
    year = 2021
    # Integer values of months to download
    months = (1,2,3,4,5,6,7,8,9,10,11,12)
    # Output hourly file name prefix
    prefix = 'campd'
    # URL for CAMD API hourly emissions files
    camd_url = 'https://api.epa.gov/easey/streaming-services/emissions/apportioned/hourly'
    #########
    cems = CEMS()
    for month in months:
        mondf = pd.DataFrame()
        for day in date_range(month, year):
            print(day, flush=True)
            daystr = day.strftime('%Y-%m-%d')
            # Dates YYYY-MM-DD
            params = {'api_key': API_KEY, 'beginDate': daystr, 'endDate' : daystr, 
              'operatingHoursOnly': False}
            req = requests.get(camd_url, params=params)
            df = pd.DataFrame(req.json())
            print('\tStatus code: %s   Records: %s' %(req.status_code, len(df)), flush=True)
            mondf = pd.concat((mondf, df))
            # 3 second timeout between requests
            time.sleep(3)
        mondf.rename(columns=cems.colmap, inplace=True)
        monname = day.strftime('%b').lower()
        fn = '%s.txt' %'-'.join((prefix, str(year), day.strftime('%b').lower(), 'hourly'))
        print('Writing %s records to %s' %(len(mondf), fn))
        mondf.to_csv(fn, index=False, columns=cems.cols)

def date_range(month, year):
    '''
    Get a list of datetimes for all days in a month
    '''
    d = pd.to_datetime(f'{month}{year}', format='%m%Y')
    return list(pd.date_range(start=d, periods=d.daysinmonth))

class CEMS:

    def __init__(self):
        # Column maps from the API to CEMs format
        self.colmap = {'stateCode': 'State', 'facilityName': 'Facility Name', 'facilityId': 'Facility ID',
          'unitId': 'Unit ID', 'associatedStacks': 'Associated Stacks', 'date': 'Date', 'hour': 'Hour',
          'opTime': 'Operating Time', 'grossLoad': 'Gross Load (MW)', 
          'steamLoad': 'Steam Load (1000 lb/hr)', 'heatInput': 'Heat Input (mmBtu)',
          'so2MassMeasureFlg': 'SO2 Mass Measure Indicator', 'so2Rate': 'SO2 Rate (lbs/mmBtu)',
          'so2Mass': 'SO2 Mass (lbs)', 'so2RateMeasureFlg': 'SO2 Rate Measure Indicator',
          'co2MassMeasureFlg': 'CO2 Mass Measure Indicator', 'co2Rate': 'CO2 Rate (short tons/mmBtu)',
          'co2Mass': 'CO2 Mass (short tons)', 'co2RateMeasureFlg': 'CO2 Rate Measure Indicator',
          'noxMassMeasureFlg': 'NOx Mass Measure Indicator', 'noxRate': 'NOx Rate (lbs/mmBtu)',
          'noxMass': 'NOx Mass (lbs)', 'noxRateMeasureFlg': 'NOx Rate Measure Indicator',
          'primaryFuelInfo': 'Primary Fuel Type', 'secondaryFuelInfo': 'Secondary Fuel Type',
          'unitType': 'Unit Type', 'so2ControlInfo': 'SO2 Controls', 'noxControlInfo': 'NOx Controls',
          'pmControlInfo': 'PM Controls', 'hgControlInfo': 'Hg Controls', 'programCodeInfo': 'Program Code'}
        self.cols = ['State','Facility Name','Facility ID','Unit ID','Associated Stacks','Date',
          'Hour','Operating Time','Gross Load (MW)','Steam Load (1000 lb/hr)','SO2 Mass (lbs)',
          'SO2 Mass Measure Indicator','SO2 Rate (lbs/mmBtu)','SO2 Rate Measure Indicator',
          'NOx Mass (lbs)','NOx Mass Measure Indicator','NOx Rate (lbs/mmBtu)',
          'NOx Rate Measure Indicator','CO2 Mass (short tons)','CO2 Mass Measure Indicator',
          'CO2 Rate (short tons/mmBtu)','CO2 Rate Measure Indicator','Heat Input (mmBtu)',
          'Primary Fuel Type','Secondary Fuel Type','Unit Type','SO2 Controls','PM Controls',
          'NOx Controls','Hg Controls','Program Code']

if __name__ == '__main__':
    main()
